<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://billysnikkers.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billysnikkers.net/" rel="alternate" type="text/html" /><updated>2023-06-24T16:49:38+02:00</updated><id>https://billysnikkers.net/feed.xml</id><title type="html">Billy Snikkers</title><subtitle>My personal webpage.
</subtitle><author><name>Billy Snikkers</name></author><entry><title type="html">Replays</title><link href="https://billysnikkers.net/2022/09/12/Replays.html" rel="alternate" type="text/html" title="Replays" /><published>2022-09-12T00:00:00+02:00</published><updated>2022-09-12T00:00:00+02:00</updated><id>https://billysnikkers.net/2022/09/12/Replays</id><content type="html" xml:base="https://billysnikkers.net/2022/09/12/Replays.html">&lt;h1 id=&quot;replays&quot;&gt;Replays&lt;/h1&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;

&lt;p&gt;These are some thoughts I had about the design of “replay” which is a module for recording and replaying a talk given in Roblox. When you replay a talk, a clone of the original character appears and delivers the talk to you, moving just how they originally did, and writing on the board live, just as they originally did. It’s basically magic - especially when the talk is given in VR. Check it out!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/s4dfwxzXEFM&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;replay-design&quot;&gt;Replay Design&lt;/h2&gt;

&lt;p&gt;I had a pretty good conceptual model of how the replay would work, and how I would synchronise all of the board writing with the character positions. Every element of the scene to be recorded (at this point just characters writing on a board) can be captured at at many different levels. For example, to replay a character moving around, I could capture the positions of the parts every single frame, or I could capture the user inputs that caused the character to move around as it did during recording. For board writing, I could capture the entire state of the board every single time it changed, or I could capture the arguments of the client-to-server events that cause each change to the board. Going even further, I could capture the user inputs on the client (where their pen was) which caused those remote events to fire.&lt;/p&gt;

&lt;p&gt;Taking it to the extreme I could try to record the neurons firing in the brain of the person controlling the character, and then try to fire those same neurons to make them replay their inputs. At the other extreme of this spectrum is something like doing a plain old screen recording of the rendered scene on your computer (or even further, the neurons that fire when you watch the recording happen).&lt;/p&gt;

&lt;p&gt;My point is that there’s a flow of information, from intent, to input, to code-execution/remote-events, to appearance/influence in the workspace, to your screen/speakers, to your eyes and ears. The task of recording and can be viewed as picking the right moment to intercept that flow of information, and then replaying is a matter of re-entering that flow of information.&lt;/p&gt;

&lt;p&gt;There are pros and cons to choosing different points of the flow. For example, if I record a CFrame for all 16 parts of the character 30 times a second, that’s 480 CFrames/sec, or 5,760 numbers/sec, or 46KB/second, or 2.76MB per minute. This is much more data than would be required to store just the user inputs. A similar comparison holds for storing the whole board state every time it changes vs storing the remote event calls.&lt;/p&gt;

&lt;p&gt;In general it seems that there is more data to store later in the flow, so earlier must be better yeah? Not exactly. There are important drawbacks recording earlier points in the flow. The system being recorded does not exist in isolation of the workspace around it. The positions of the parts of a character are not just a function of the player inputs, since it can be influenced by things like physics simulation (you might be assaulted by the audience while lecturing). If those physical influences don’t also occur to the character while replaying, the character might end up a metre to the left of where they should be writing. Even without external influences, you are relying on determinism of the physics engine if you are re-simulating everything live.&lt;/p&gt;

&lt;p&gt;The same point is relevant for the writing on the board. If you are re-performing the individual writing events, then the actions of the users watching can destroy or obscure what you were writing. On the other hand if there is someone else present during the recording whose board interaction isn’t being recorded, then you could end up with a very different outcome during the replay. For example, they could clear the board during the recording (perhaps they were trying to help!), but this won’t occur in the replay.&lt;/p&gt;

&lt;p&gt;The best way forward is to attempt to strike a balance where you can record data efficiently, while being resistant to the chaos of re-simulation. A good example of this is how I ended up recording VR characters. We use the Nexus VR Character Model, which translates the user input cframes of the controllers and headset into 3 world-relative CFrames, then passes those to all other clients. Those 3 CFrames are then used to position (with physics) all 16 parts of the character using Motors. I record these CFrames as they come into the server, and on replay I just call the same functions that perform the physics simulation to position the character parts. Subsequent physics that occur during the replay can affect the character parts, but they cannot affect the recorded CFrames, so if the character is pushed during the replay, it will be dragged back towards the target CFrames anyway. This is what I mean by making the replay resistant to the chaos of re-simulation.&lt;/p&gt;

&lt;p&gt;I haven’t quite achieved the same balance for recording the board writing, and this is partly because we don’t necessarily want the person in the replay to be the only who can interact with the board. It could be quite useful to be able to annotate and edit freely on the fly. It’s also just kinda fun (funny) to mess with the recording. Erasing what it writes, jumping on its head etc. The later in the flow of information that the recording derives-from, the less novel the whole thing becomes. Just seeing the end of that flow is just like watching a screen recording. As an audience member, the more you can influence the re-simulation of things the more involved and connected you feel to whats happening in front of you.&lt;/p&gt;

&lt;p&gt;However, it’s no fun to accidentally ruin the re-simulation of a replay that you’re trying to learn from, and the speaker starts gesturing at things that aren’t there anymore (either because they’ve been moved, or what they’ve written has been erased). I think a good compromise is to allow some degree of re-simulation, but let the audience choose to jump back to the canonical state of things, i.e. putting the character back where they should be, and making the board look as it was at that point in the recording. This happens automatically for the character, but the board might be a little trickier.&lt;/p&gt;

&lt;h2 id=&quot;technical-roadblocks-and-debugging&quot;&gt;Technical Roadblocks and Debugging&lt;/h2&gt;

&lt;p&gt;I want to end with some reflections on the technical side of things. The first issue I faced was how to patch into metaboard in a natural way to record and replay the writing events. I wanted to make “replay” an independent module that interfaces with metaboard, as opposed to just baking replays as a special use case into the metaboard code. This amounted to a refactor that separated the remote event handling from the board-state-manipulation. In the future I can imagine having to refactor more functions to take additional arguments, or inserting intermmediate functions that can be used by external modules.&lt;/p&gt;

&lt;p&gt;It also took a while to get the character simulation working, which most involved learning how the Nexus VR Character Model works. I got it working with a hack that doesn’t animate as smoothly as it should but I’ll revisit this later.&lt;/p&gt;

&lt;p&gt;The thing that took by far the longest, and was the most soul-draining, was debugging would-be-type errors. After writing all the datastore code to serialise, store, restore and desererialise a replay, the code had grown a bit and there was a lot of arguments being passed around. I spent many boring hours hitting play, putting the headset on, testing until there was an error, taking it off, then trying to locate which function had been called with the wrong argument order, or was missing arguments. This was made worse by the fact that in some circumstances, the use of coroutines can prevent errors from surfacing to the output as they normally would. They would only appear if I run the program in debug mode and carefully step through it. I don’t fully understand yet why this happens.&lt;/p&gt;

&lt;p&gt;The problems with passing incorrect arguments around usually occurs when I modify a function to take more or less arguments, and then forget to update all instances that make use of that function. One remedy that I have begun to employ is passing a single table of named arguments to the function, which means order never matters.  However this isn’t a complete solution. When mistakes inevitably happen, the error usually occurs deep into a stacktrace of function calls, and the game is to figure out which function was called with incorrect arguments, which can be much further up, and sometimes in a past thread.&lt;/p&gt;

&lt;p&gt;These problems don’t occur in a strictly-typed programming language, and this is certainly the reason why many Roblox programmers have been attracted to writing their games/libraries with TypeScript. You write the code (mistakes and all), and the type checker catches all the silly type errors for you. And it captures them where they first happen, not just where they cause a problem later down the road, and not just the ones that your runtime scenario runs into.&lt;/p&gt;

&lt;p&gt;At this time I have no desire to invest any time programming in TypeScript for Roblox, but it’s starting to feel a bit amateur-hour to be debugging type errors the way I am. I’m considering trying out “t” which is a runtime typechecker.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devforum.roblox.com/t/t-a-runtime-type-checker-for-roblox/139769&quot;&gt;https://devforum.roblox.com/t/t-a-runtime-type-checker-for-roblox/139769&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It only works at runtime, but the difference it would make is that there is no longer a game of finding where in the stack of function calls was an argument passed incorrectly.&lt;/p&gt;

&lt;p&gt;I’ve tried using the luau type checker, but I’ve never actually seen it alert me to a type error so I doubt I was using it properly. Also I don’t think it works if a function is imported from somewhere in the datamodel that only exists at runtime.&lt;/p&gt;

&lt;p&gt;-Billy.&lt;/p&gt;</content><author><name>Billy Snikkers</name></author><summary type="html">Replays</summary></entry><entry><title type="html">Learning Type Theory and Lambda Calculus</title><link href="https://billysnikkers.net/2020/03/26/Type-Theory-Lambda-Calculus.html" rel="alternate" type="text/html" title="Learning Type Theory and Lambda Calculus" /><published>2020-03-26T00:00:00+01:00</published><updated>2020-03-26T00:00:00+01:00</updated><id>https://billysnikkers.net/2020/03/26/Type-Theory-Lambda-Calculus</id><content type="html" xml:base="https://billysnikkers.net/2020/03/26/Type-Theory-Lambda-Calculus.html">&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Barendregt &amp;amp; Barendsen, 1984 - &lt;a href=&quot;http://www.nyu.edu/projects/barker/Lambda/barendregt.94.pdf&quot;&gt;&lt;em&gt;Introduction to Lambda Calculus&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Girard, Lafont &amp;amp; Taylor, 1987 - &lt;a href=&quot;http://www.paultaylor.eu/stable/Proofs+Types.html&quot;&gt;&lt;em&gt;Proofs and Types&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sørenson &amp;amp; Urzyczyn, 1999 - &lt;a href=&quot;https://disi.unitn.it/~bernardi/RSISE11/Papers/curry-howard.pdf&quot;&gt;&lt;em&gt;Lectures on The Curry-Howard Isomorphism&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://math.stackexchange.com/questions/967/learning-lambda-calculus&quot;&gt;StackExchange Post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lambda-the-ultimate.org&quot;&gt;Lambda the Ultimate - The Programming Languages Weblog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Chris Barker - &lt;a href=&quot;http://www.nyu.edu/projects/barker/Lambda/&quot;&gt;Intro to Lambda Reduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Peter Selinger - &lt;a href=&quot;https://www.mathstat.dal.ca/~selinger/papers/lambdanotes.pdf&quot;&gt;Lecture Notes on The Lambda Calculus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Billy Snikkers</name></author><summary type="html">Resources</summary></entry><entry><title type="html">Learning Topos Theory</title><link href="https://billysnikkers.net/2020/01/11/Topos-Theory.html" rel="alternate" type="text/html" title="Learning Topos Theory" /><published>2020-01-11T00:00:00+01:00</published><updated>2020-01-11T00:00:00+01:00</updated><id>https://billysnikkers.net/2020/01/11/Topos-Theory</id><content type="html" xml:base="https://billysnikkers.net/2020/01/11/Topos-Theory.html">&lt;p&gt;I want to learn Topos Theory as a first venture into categorical/categorial logic. My current understanding of the motivation for topos theory is that its a means of generalising/swapping out the models of a mathematical theory, which is usually occupied by set theory. I’m particularly intrigued about the connection between geometry and logic.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;I should warn that these descriptions are written before fully reading the content, so they may be naive.&lt;/p&gt;

&lt;h3 id=&quot;textbooks&quot;&gt;Textbooks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Robert Goldblatt - &lt;a href=&quot;https://projecteuclid.org/euclid.bia/1403013939&quot;&gt;&lt;em&gt;The Categorial Analysis of Logic&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MacLane and Moerdijk - &lt;a href=&quot;https://ncatlab.org/nlab/show/Sheaves+in+Geometry+and+Logic&quot;&gt;&lt;em&gt;Sheaves in Geometry and Logic&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bartoz Milewski - &lt;a href=&quot;https://github.com/hmemcpy/milewski-ctfp-pdf/&quot;&gt;&lt;em&gt;Category Theory For Programmers&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;videos&quot;&gt;Videos&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Daniel Murfet - &lt;a href=&quot;https://www.youtube.com/playlist?list=PLKnx70LRf21dHwTTJ_ihHalZdeXlsZC1U&quot;&gt;&lt;em&gt;Topos Theory Seminar&lt;/em&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://therisingsea.org/post/seminar-ch/&quot;&gt;&lt;em&gt;Notes&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bartoz Milewski - &lt;a href=&quot;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/&quot;&gt;&lt;em&gt;Category Theory For Programmers (Preface)&lt;/em&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Video Lectures Part &lt;a href=&quot;https://www.youtube.com/playlist?list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_&quot;&gt;&lt;em&gt;I&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/playlist?list=PLbgaMIhjbmElia1eCEZNvsVscFef9m0dm&quot;&gt;&lt;em&gt;II&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/playlist?list=PLbgaMIhjbmEn64WVX4B08B4h2rOtueWIL&quot;&gt;&lt;em&gt;III&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hmemcpy/milewski-ctfp-pdf/&quot;&gt;&lt;em&gt;Textbook&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;General background on Category Theory, which builds towards some applications including monads, topoi and Lawvere Theories (see part &lt;a href=&quot;https://www.youtube.com/playlist?list=PLbgaMIhjbmEn64WVX4B08B4h2rOtueWIL&quot;&gt;&lt;em&gt;III&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Brendan Fong, Bartosz Milewski, and David Spivak - &lt;a href=&quot;http://brendanfong.com/programmingcats.html&quot;&gt;MIT 18.S097 - Programming with Categories&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://brendanfong.com/programmingcats_files/cats4progs-DRAFT.pdf&quot;&gt;Lecture Notes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLhgq-BqyZ7i7MTGhUROZy3BOICnVixETS&quot;&gt;Lecture Videos&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://forum.azimuthproject.org/categories/programming-with-categories-course&quot;&gt;Discussion Forum&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MathProofsable - &lt;a href=&quot;https://www.youtube.com/playlist?list=PL4FD0wu2mjWM3ZSxXBj4LRNsNKWZYaT7k&quot;&gt;&lt;em&gt;Category Theory: Toposes&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MathProofsable - &lt;a href=&quot;https://www.youtube.com/playlist?list=PL4FD0wu2mjWPuKxlMJ-VTHZV5VdzX1twI&quot;&gt;&lt;em&gt;Category Theory: First Order Logic&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Steve Awodey - &lt;a href=&quot;https://www.youtube.com/watch?v=U_MGMhDMuPE&quot;&gt;Natural Models of Type Theory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;postsnotes&quot;&gt;Posts/Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;John Baez - &lt;a href=&quot;http://math.ucr.edu/home/baez/topos.html&quot;&gt;&lt;em&gt;Topos Theory in a Nutshell&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;John Baez - &lt;a href=&quot;http://math.ucr.edu/home/baez/categories.html&quot;&gt;&lt;em&gt;Categories, Quantization and much more&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Daniel Murfet - &lt;a href=&quot;http://therisingsea.org/notes/FoundationsForCategoryTheory.pdf&quot;&gt;&lt;em&gt;Foundations for Category Theory&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tom Leinster - &lt;a href=&quot;https://arxiv.org/abs/1012.5647&quot;&gt;&lt;em&gt;An informal introduction to topos theory&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ieke Moerdijk &amp;amp; Jaap Van Oosten - &lt;a href=&quot;http://www.staff.science.uu.nl/~ooste110/syllabi/toposmoeder.pdf&quot;&gt;&lt;em&gt;Basic Category Theory and Topos Theory: Lecture Notes&lt;/em&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;From the mastermath course &lt;a href=&quot;http://www.staff.science.uu.nl/~ooste110/cattoptheory18.html&quot;&gt;&lt;em&gt;Category Theory and Topos Theory&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ieke Moerdijk &amp;amp; Jaap Van Oosten - &lt;a href=&quot;http://www.staff.science.uu.nl/~ooste110/syllabi/toposmoeder.pdf&quot;&gt;&lt;em&gt;Topos Theory: Preliminary Lecture Notes&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Peter Johnstone - Sketches of An Elephant: A Topos Theory Compendium
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.cmu.edu/dietrich/philosophy/docs/tech-reports/159_Awodey.pdf&quot;&gt;Book Review&lt;/a&gt; by Steve Awodey&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;non-introductory-topics&quot;&gt;Non-introductory topics&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Peter Johnstone - &lt;a href=&quot;https://www.youtube.com/watch?v=pKWYa9sc5UI&quot;&gt;Topos-theoretic models of the continuum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Billy Snikkers</name></author><summary type="html">I want to learn Topos Theory as a first venture into categorical/categorial logic. My current understanding of the motivation for topos theory is that its a means of generalising/swapping out the models of a mathematical theory, which is usually occupied by set theory. I’m particularly intrigued about the connection between geometry and logic.</summary></entry><entry><title type="html">Welcome</title><link href="https://billysnikkers.net/2020/01/08/post.html" rel="alternate" type="text/html" title="Welcome" /><published>2020-01-08T00:00:00+01:00</published><updated>2020-01-08T00:00:00+01:00</updated><id>https://billysnikkers.net/2020/01/08/post</id><content type="html" xml:base="https://billysnikkers.net/2020/01/08/post.html">&lt;p&gt;Hi there. Welcome to my website.&lt;/p&gt;</content><author><name>Billy Snikkers</name></author><summary type="html">Hi there. Welcome to my website.</summary></entry></feed>